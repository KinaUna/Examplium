@using Examplium.Client.Services.UserInfos
@using Examplium.Client.Shared.Components.Settings
@using Examplium.Shared.Constants
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http.Headers
@using Examplium.Shared.Models.Services
@attribute [Authorize]
@inject IUserInfosService UserInfosService
@inject IUserProfilePictureService UserProfilePictureService
@implements IDisposable
@if (_editUserInfo && UserInfosService.CurrentUser != null)
{
    <EditForm Model="UserInfosService.CurrentUser" OnSubmit="UpdateUserInfo">
        <div class="card card bg-userinfo rounded">
            <div class="card-header bg-userinfo-header text-white">
                @UserInfosService.CurrentUser.Email
            </div>
            <div class="card-body">
                <label class="text-white-50" for="firstNameInput">First name</label>
                <InputText id="firstNameInput" class="form-control mb-3" @bind-Value="UserInfosService.CurrentUser.FirstName" DisplayName="First name"></InputText>
                <label class="text-white-50" for="middleNameInput">Middle name</label>
                <InputText id="middleNameInput" class="form-control mb-3" @bind-Value="UserInfosService.CurrentUser.MiddleName" DisplayName="Middle name"></InputText>
                <label class="text-white-50" for="lastNameInput">Last name</label>
                <InputText id="lastNameInput" class="form-control mb-3" @bind-Value="UserInfosService.CurrentUser.LastName" DisplayName="Last name"></InputText>
                <label class="text-white-50">Timezone</label>
                <div class="form-control mb-3">
                    <TimezoneSelector @bind-SelectedTimezone="UserInfosService.CurrentUser.TimeZone"></TimezoneSelector>
                </div>
                <label class="text-white-50">Profile picture</label>
                @if (!string.IsNullOrEmpty(UserInfosService.CurrentUser?.Picture))
                {
                    <div><img src="@UserProfilePictureService.GetProfilePictureUrl(UserInfosService.CurrentUser.Picture)" height="150px"/></div>
                }
                <InputFile class="form-control mb-3" accept=".png, .jpg, .jpeg" OnChange="@OnProfilePictureChange" />
            </div>
            <div class="card-footer">
                <div class="mt-3 w-100">
                    <div class="float-end">
                        <button class="btn btn-success" type="submit"><span class="oi oi-circle-check" aria-hidden="true"></span> Save</button>
                        <button class="btn btn-secondary" @onclick="CancelEdit"><span class="oi oi-circle-x" aria-hidden="true"></span> Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}
else
{
    <div class="card card bg-userinfo rounded">
        <div class="card-header bg-userinfo-header">
            <div class="float-end">
                <button class="btn btn-primary ms-2" @onclick="EditUserInfo"><span class="oi oi-pencil" aria-hidden="true"></span></button>
            </div>
            <h4 class="text-white">@UserInfosService.CurrentUser?.Email</h4>
        </div>
        <div class="card-body text-white">
            <div class="row mb-3">
                <div class="col-3 col-lg-2 text-white-50">First name:</div>
                <div class="col-8"> @UserInfosService.CurrentUser?.FirstName</div>
            </div>
            <div class="row mb-3">
                <div class="col-3 col-lg-2 text-white-50">Middle name: </div>
                <div class="col-8">@UserInfosService.CurrentUser?.MiddleName</div>
            </div>
            <div class="row mb-3">
                <div class="col-3 col-lg-2 text-white-50">Last name:</div>
                <div class="col-8">@UserInfosService.CurrentUser?.LastName</div>
            </div>
            <div class="row mb-3">
                <div class="col-3 col-lg-2 text-white-50">Time zone:</div>
                <div class="col-8">@UserInfosService.CurrentUser?.TimeZone</div>
            </div>
            @if (!string.IsNullOrEmpty(UserInfosService.CurrentUser?.Picture))
            {
                <div class="row mb-3">
                    <div class="col-3 col-lg-2 text-white-50">Profile picture:</div>
                    <div class="col-8"> <img src="@UserProfilePictureService.GetProfilePictureUrl(UserInfosService.CurrentUser.Picture)" height="150px" /></div>
                </div>
            }
        </div>
    </div>
}
@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="bg-danger">
        <span class="text-white">Error: @_errorMessage</span>
    </div>
}
@code {
    private bool _editUserInfo = false;
    private bool _profilePictureChanged = false;
    private IBrowserFile? _uploadPictureFile;
    private string _errorMessage = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        await UserInfosService.GetCurrentUserInfo();
        UserInfosService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        UserInfosService.OnChange -= StateHasChanged;
    }

    private async Task EditUserInfo()
    {
        _errorMessage = string.Empty;
        _editUserInfo = true;
    }

    private async Task CancelEdit()
    {
        _editUserInfo = false;
        _profilePictureChanged = false;
        _uploadPictureFile = null;

        await UserInfosService.GetCurrentUserInfo();
    }

    private async Task UpdateUserInfo()
    {
        _errorMessage = string.Empty;
        if (UserInfosService.CurrentUser != null)
        {
            if (_profilePictureChanged && _uploadPictureFile != null)
            {
                Console.WriteLine("Upload picture file: " + _uploadPictureFile.Name);
                UploadFileResponse uploadFileResponse = await UserProfilePictureService.UploadProfilePicture(_uploadPictureFile);
                if (uploadFileResponse.Success && !string.IsNullOrEmpty(uploadFileResponse.SavedFileName))
                {
                    UserInfosService.CurrentUser.Picture = uploadFileResponse.SavedFileName;
                }
                else
                {
                    _errorMessage = uploadFileResponse.Message;
                }
            }

            await UserInfosService.UpdateCurrentUser();
        }

        _editUserInfo = false;
    }

    private void OnProfilePictureChange(InputFileChangeEventArgs e)
    {
        _uploadPictureFile = e.File;
        _profilePictureChanged = true;

    }

}
