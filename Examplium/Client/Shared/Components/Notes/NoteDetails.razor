@using Examplium.Shared.Models.Domain
@using Examplium.Client.Services.Notes
@inject INotesService NotesService
@implements IDisposable

@if (_editNote && NoteItem != null)
{
    <EditForm Model="NoteItem" OnSubmit="SaveNote">
        <div class="card card bg-notes rounded">
            <div class="card-header bg-success">
                <label class="text-white-50" for="titleInput">Title</label>
                <InputText id="titleInput" class="form-control" @bind-Value="NoteItem.Title" DisplayName="Title"></InputText>
            </div>
            <div class="card-body">
                <label class="text-white-50" for="contentInput">Content</label>
                <InputTextArea id="contentInput" class="form-control" @bind-Value="NoteItem.Content" DisplayName="Content"></InputTextArea>
            </div>
            <div class="card-footer">
                <div class="float-start">
                    <div>
                        <label class="text-white-50" for="categoryInput">Category</label>
                        <InputText id="categoryInput" class="form-control" @bind-Value="NoteItem.Category" DisplayName="Category"></InputText>
                    </div>
                    <div>
                        <label class="text-white-50" for="tagsInput">Tags</label>
                        <InputText id="tagsInput" class="form-control" @bind-Value="NoteItem.Tags" DisplayName="Tags"></InputText>
                    </div>
                </div>
                <div class="float-end">
                    <div class="text-white-50">
                        Created: @NoteItem?.Created
                    </div>
                    <div class="text-white-50">
                        Updated: @NoteItem?.Updated
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <div class="mt-3 w-100">
                    <div class="float-end">
                        <button class="btn btn-primary" type="submit">Save note</button>
                        <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}
else
{
    <div class="card bg-notes rounded">
        <div class="card-header">
            @if (_showDeleteWarning)
            {
                <div class="float-end alert alert-warning">
                    <span class="text-danger">
                        Are you sure want to delete this note?
                    </span>
                    <button class="btn btn-success ms-2" @onclick="DeleteNote"><span class="oi oi-check me-2" aria-hidden="true"></span>Yes</button>
                    <button class="btn btn-danger ms-2" @onclick="CancelDelete"><span class="oi oi-x me-2" aria-hidden="true"></span>No</button>
                </div>
               
                
            }
            else
            {
                <div class="float-end">
                    <button class="btn btn-primary ms-2" @onclick="EditNote"><span class="oi oi-pencil" aria-hidden="true"></span></button>
                    <button class="btn btn-danger ms-2" @onclick="ConfirmDeleteNote"><span class="oi oi-trash" aria-hidden="true"></span></button>
                </div>
            }

            <div class="h3 text-white mt-2 float-start">
                <span class="oi oi-document" aria-hidden="true"></span> @NoteItem?.Title
            </div>
        </div>
        <div class="card-body bg-white m-2 rounded">
            <div class="space-20"></div>
            @NoteItem?.Content
            <div class="space-20"></div>
            
        </div>
        <div class="card-footer">
            <div class="float-start">
                <div>
                    Category: @NoteItem?.Category
                </div>
                <div>
                    Tags: @NoteItem?.Tags
                </div>
            </div>
            <div class="float-end">
                <div class="text-white-50">
                    Created: @NoteItem?.Created
                </div>
                <div class="text-white-50">
                    Updated: @NoteItem?.Updated
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public Note? NoteItem { get; set; }

    private bool _editNote = false;
    private bool _showDeleteWarning = false;

    protected override async Task OnInitializedAsync()
    {
        NotesService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        NotesService.OnChange -= StateHasChanged;
    }

    private void EditNote()
    {
        _editNote = true;
    }

    private async Task SaveNote()
    {
        if (NoteItem != null)
        {
            await NotesService.UpdateNote(NoteItem);
        }

        _editNote = false;
    }

    private void ConfirmDeleteNote()
    {
        _showDeleteWarning = true;
    }

    private async Task DeleteNote()
    {
        if (NoteItem != null)
        {
            await NotesService.DeleteNote(NoteItem);
        }
    }

    private async Task CancelEdit()
    {
        if (NoteItem != null)
        {
            NoteItem = await NotesService.GetNoteById(NoteItem.Id);
        }
    }

    private void CancelDelete()
    {
        _showDeleteWarning = false;
    }
}
